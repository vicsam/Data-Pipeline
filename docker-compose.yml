version: "3.9"

services:
  # ---------- Kafka ----------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 5

  # ---------- MinIO (S3-compatible) ----------
  minio:
    image: minio/minio:RELEASE.2024-08-29T01-40-52Z
    hostname: minio
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ---------- PostgreSQL ----------
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: pipeline
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d pipeline"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------- Apache Airflow ----------
  airflow-scheduler:
    image: apache/airflow:2.9.3
    container_name: airflow-scheduler
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:password@postgres:5432/pipeline
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
    command: scheduler

  airflow-webserver:
    image: apache/airflow:2.9.3
    container_name: airflow-web
    depends_on:
      - airflow-scheduler
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:password@postgres:5432/pipeline
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    command: webserver

  airflow-init:
    image: apache/airflow:2.9.3
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://user:password@postgres:5432/pipeline
    command: >
      bash -c "airflow db init && 
               airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin"

  # ---------- Streamlit UI ----------
  streamlit:
    build: ./streamlit
    container_name: streamlit
    ports:
      - "8501:8501"
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
    volumes:
      - ./discovery:/app/discovery

  # ---------- Scrapy Spider (Acquisition) ----------
  scrapy:
    build: ./acquisition/scrapy_spider
    container_name: scrapy
    depends_on:
      - kafka
    command: scrapy crawl discovery
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
    volumes:
      - ./acquisition/scrapy_spider:/app

  # ---------- Storage Consumer (Kafka â†’ MinIO + Postgres) ----------
  storage-consumer:
    build: ./storage
    container_name: storage-consumer
    depends_on:
      - kafka
      - minio
      - postgres
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: python nifi_consumer.py

  # ---------- Cleaning Worker ----------
  cleaning:
    build: ./cleaning
    container_name: cleaning
    depends_on:
      - minio
    environment:
      MINIO_ENDPOINT: http://minio:9000
    command: python refinery.py

volumes:
  minio-data:
  pg-data: